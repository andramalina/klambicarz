#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    May 02, 2019 11:46:24 PM EEST  platform: Windows NT

import sys
import datetime
from tkinter import messagebox
from tkinter import *
try:
    import Tkinter as tk
    import tkFont
    import ttk
except ImportError:  # Python 3
    import tkinter as tk
    import tkinter.font as tkFont
    import tkinter.ttk as ttk


def set_Tk_var():
    global che100
    che100 = tk.StringVar()

def backToAdminMainPage(p1, canvas1, canvas2):
    print('klambi_support.backToAdminMainPage')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas1)
    tk.Misc.lift(canvas2)
    sys.stdout.flush()

def backToUserMainPage(p1, canvas1, canvas2):
    print('klambi_support.backToUserMainPage')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas1)
    tk.Misc.lift(canvas2)
    sys.stdout.flush()

def checkParkings(p1, canvas):
    print('klambi_support.checkParkings')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas)
    sys.stdout.flush()

def confirmNewReservation(p1, canvas1, canvas2, yearInputUser ,monthInputUser, dayInputUser, hourInputUser, parkingIDReservationInput, carRegNoInput, fastChargingCheckboxState, ctrl_Programari, ctrl_Parcari, ctrl_Masini):
    print('klambi_support.confirmNewReservation')
    print('p1 = {0}'.format(p1))
    year=yearInputUser.get()
    month=monthInputUser.get()
    day=dayInputUser.get()
    hour=hourInputUser.get()
    parkingId=parkingIDReservationInput.get()
    carNo=carRegNoInput.get()
    fastStyle=fastChargingCheckboxState.get()
    print("iuhuu")
    print(fastStyle)
    if (ctrl_Parcari.findParcare(parkingId)== False):
        messagebox.showinfo("Error", "The id does not exist!")
    if (ctrl_Masini.findMasina(carNo)== False):
        messagebox.showinfo("Error", "The car number does not exist!")
    if(len(year)!=0 and len(month)!=0 and len(day)!=0):
        ctrl_Programari.addProgramareWithDay(parkingId,carNo,year,month,day,hour,fastStyle)
    else:
        ctrl_Programari.addProgramareToday(parkingId,hour,carNo,fastStyle)
    messagebox.showinfo("Success", "Reservation successfully made!")
    tk.Misc.lift(canvas1)
    tk.Misc.lift(canvas2)
    sys.stdout.flush()

def login(p1, canvas1, canvas2, entryUsername, entryPassword, ctrl_Users, roleLabelAdmin, roleLabelUser, usernameLabelAdmin,usernameLabelUser):
    print('klambi_support.login')
    print('p1 = {0}'.format(p1))
    print(entryUsername.get())
    print(entryPassword.get())
    tip = ctrl_Users.verify_user(entryUsername.get(), entryPassword.get())
    if tip == "client":
        roleLabelUser.configure(text='client')
        usernameLabelUser.configure(text=entryUsername.get())
        tk.Misc.lift(canvas1)
    elif tip == "admin":
        roleLabelAdmin.configure(text='admin')
        usernameLabelAdmin.configure(text=entryUsername.get())
        tk.Misc.lift(canvas2)
    else:
        messagebox.showinfo("Error", "Wrong credentials!")

    sys.stdout.flush()

def logout(p1, canvas1, canvas2):
    print('klambi_support.logout')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas1)
    tk.Misc.lift(canvas2)
    sys.stdout.flush()

def newReservation(p1, canvas):
    print('klambi_support.newReservation')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas)
    sys.stdout.flush()

def profitByDay(p1, ctrl_Programari, label ,list, container):
    print('klambi_support.profitByDay')
    print('p1 = {0}'.format(p1))
    set_list_ProfitListByDay(list, ctrl_Programari, container)
    label.configure(text='day')
    tk.Misc.lift(container)
    tk.Misc.lift(list)
    sys.stdout.flush()

def profitByMonth(p1, ctrl_Programari,label,list,container):
    print('klambi_support.profitByMonth')
    print('p1 = {0}'.format(p1))
    set_list_ProfitListByMonth(list,ctrl_Programari,container)
    label.configure(text='month')
    tk.Misc.lift(container)
    tk.Misc.lift(list)
    sys.stdout.flush()

def profitByWeek(p1, ctrl_Programari,label, list, container):
    print('klambi_support.profitByWeek')
    print('p1 = {0}'.format(p1))
    set_list_ProfitListByWeek(list,ctrl_Programari,container)
    label.configure(text='week')
    tk.Misc.lift(container)
    tk.Misc.lift(list)
    sys.stdout.flush()

def selectUserDate(p1, canvas, yearInputUser ,monthInputUser, dayInputUser, hourInputUser,ctrl_Parcari, list, container):
    print('klambi_support.selectUserDate')
    print('p1 = {0}'.format(p1))
    if(len(yearInputUser.get())!=0 and len(monthInputUser.get())!=0 and len(dayInputUser.get())!=0):
        try:
            int(yearInputUser.get())
            int(dayInputUser.get())
            int(monthInputUser.get())
        except ValueError:
            messagebox.showinfo("Error", "Wrong date!")

    try:
        int(hourInputUser.get())
    except ValueError:
        messagebox.showinfo("Error", "Wrong hour!")
    else:

        set_list_ParcariAvailableLotsOnSpecificDate(list, ctrl_Parcari,yearInputUser.get(),monthInputUser.get(),dayInputUser.get(),hourInputUser.get(), container)
    # ridicam intai canvasul, apoi container-ul listei, apoi lista - ordinea opusa fata de cum se vad pe ecran
        tk.Misc.lift(canvas)
        tk.Misc.lift(container)
        tk.Misc.lift(list)
        sys.stdout.flush()

def selectAdminDate(p1, canvas, yearInputAdmin, monthInputAdmin, dayInputAdmin, hourInputAdmin, ctrl_Parcari, ctrl_Programari, totalLots,availableLots,emptyLots, list,container):
    print('klambi_support.selectAdminDate')
    print('p1 = {0}'.format(p1))


    if(len(yearInputAdmin.get())!=0 and len(monthInputAdmin.get())!=0 and len(dayInputAdmin.get())!=0):
       try:
           int(yearInputAdmin.get())
           int(dayInputAdmin.get())
           int(monthInputAdmin.get())
           int(hourInputAdmin.get())

       except ValueError:
           messagebox.showinfo("Error", "Wrong data!")
       else:
            set_labels_TotalAvailableBookedForSpecificDate(totalLots, availableLots, emptyLots, ctrl_Parcari,
                                                       yearInputAdmin.get(), monthInputAdmin.get(), dayInputAdmin.get(),
                                                       hourInputAdmin.get())
            set_list_ReservationListSpecificDate(list,yearInputAdmin.get(),monthInputAdmin.get(),dayInputAdmin.get(),hourInputAdmin.get(),ctrl_Programari,container)

            tk.Misc.lift(canvas)
            tk.Misc.lift(container)
            tk.Misc.lift(list)
            sys.stdout.flush()



    else:
        try:
            int(hourInputAdmin.get())
        except ValueError:
            messagebox.showinfo("Error", "Wrong hour!")
        else:
            set_labels_TotalAvailableBookedForToday(totalLots, availableLots, emptyLots, ctrl_Parcari,hourInputAdmin.get())
            set_list_ReservationListToday(list,hourInputAdmin.get(),ctrl_Programari,container)
            tk.Misc.lift(canvas)
            tk.Misc.lift(container)
            tk.Misc.lift(list)
            sys.stdout.flush()


def checkAvailability(p1, canvas, totalLotsLabel,availableLotsLabel,bookedLotsLabel, ctrl_Parcari, list, container):
    print('klambi_support.checkAvailability')
    print('p1 = {0}'.format(p1))
    set_list_ParcariCapacitiesOccupied(list,ctrl_Parcari,container)
    set_labels_TotalAvailableBooked(totalLotsLabel,availableLotsLabel,bookedLotsLabel,ctrl_Parcari)
    tk.Misc.lift(canvas)
    tk.Misc.lift(container)
    tk.Misc.lift(list)
    sys.stdout.flush()


def manageParking(p1, canvas, ctrl_Parcari,list,container):
    print('klambi_support.manageParking')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas)
    set_list_ParcariUpdateList(list,ctrl_Parcari,container)
    sys.stdout.flush()
    tk.Misc.lift(canvas)
    tk.Misc.lift(container)
    tk.Misc.lift(list)
    sys.stdout.flush()

def changePakingStatus(p1, canvas1, canvas2, entryId, entryNewStatus,ctrl_Parcari,ctrl_Programari):
    print('klambi_support.changePakingStatus')
    print('p1 = {0}'.format(p1))
    val=0
    if(entryNewStatus.get()=="inchis"):
        val=0
    elif(entryNewStatus.get()=="deschis"):
        val=1
    else:
        messagebox.showinfo("Error","Please insert inchis/deschis for status!")


    if(ctrl_Parcari.findParcare(entryId.get())==False):
        messagebox.showinfo("Error","The id does not exist!")
    elif(val==1 or val==0):
        ctrl_Parcari.updateStatus(val,entryId.get())

        if(val==0):
            ctrl_Programari.deleteProgramariByParcareAndAfterSysdate(entryId.get())
    tk.Misc.lift(canvas1)
    tk.Misc.lift(canvas2)
    sys.stdout.flush()

def viewProfit(p1, canvas):
    print('klambi_support.viewProfit')
    print('p1 = {0}'.format(p1))
    tk.Misc.lift(canvas)
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def set_labels_TotalAvailableBooked(totalLotsLabel,availableLotsLabel,bookedLotsLabel,ctrl_parcari):
    results=ctrl_parcari.getTotalCapacityBookedAvailable()
    totalLotsLabel.configure(text=results[0])
    availableLotsLabel.configure(text=results[1])
    bookedLotsLabel.configure(text=results[2])

def set_list_ParcariUpdateList(list,ctrl_Parcari,container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['ID', 'Adress', 'Status']  # copia fidela a listei de capete de tabel
    for row in ctrl_Parcari.getAllParcariIdLocatie():
        new_row=[]
        new_row.append(row[0])
        new_row.append(row[1])
        if(row[2]==1):
            new_row.append('deschis')
        else:
            new_row.append('inchis')
        list_to_add.append(new_row)


    for item in list_to_add:  #pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)     #adaugam in obiectul de tip tree
        list.column(list_header[0], width=30)
        list.column(list_header[1], width=180)
        list.column(list_header[2], width=75)
    tk.Misc.lift(container)     #ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()

def set_list_ParcariCapacitiesOccupied(list, ctrl_Parcari,container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['ID', 'Adress', 'Available Lots']  # copia fidela a listei de capete de tabel
    for row in ctrl_Parcari.getParcariWithCapacitiesAndOccupied():
        list_to_add.append(row)
    for item in list_to_add:    #pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)     #adaugam in obiectul de tip tree
        list.column(list_header[0], width=50)
        list.column(list_header[1], width=200)
        list.column(list_header[2], width=100)
    tk.Misc.lift(container)     #ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()

def set_list_ParcariAvailableLotsOnSpecificDate(list, ctrl_Parcari,year,month,day,hour, container):
    list.delete(*list.get_children()) #golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = [] #definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['ID','Adress', 'Lots']  #copia fidela a listei de capete de tabel
    if(len(year)!=0 and len(month)!=0 and len(day)!=0):
        for row in ctrl_Parcari.getParcariAvailableLotsOnSpecificDate(year,month,day,hour):
            list_to_add.append(row)  #retinem fiecare rezultat al functiei in lista initiata goala

    else:

        for row in ctrl_Parcari.getParcariAvailableLotsToday(hour):
            list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
        list.column(list_header[0], width=50)
        list.column(list_header[1], width=155)
        list.column(list_header[2], width=50)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()



def set_list_ReservationListSpecificDate(list, year,month,day,hour,ctrl_Programari,container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['Reservation Id', 'Car Number', 'Parking Id']  # copia fidela a listei de capete de tabel
    for row in ctrl_Programari.getReservationsSpecificDate(year,month,day,hour):
        list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
    list.column(list_header[0], width=100)
    list.column(list_header[1], width=140)
    list.column(list_header[2], width=100)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()

def set_list_ReservationListToday(list, hour,ctrl_Programari,container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['Reservation Id', 'Car Number', 'Parking Id']  # copia fidela a listei de capete de tabel
    for row in ctrl_Programari.getReservationsToday(hour):
        list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
    list.column(list_header[0], width=100)
    list.column(list_header[1], width=140)
    list.column(list_header[2], width=100)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()

def sortby(tree, col, descending):
    """functia de sortare la click"""
    # grab values to sort
    data = [(tree.set(child, col), child) \
        for child in tree.get_children('')]
    # if the data to be sorted is numeric change to float
    #data =  change_numeric(data)
    # now sort the data in place
    data.sort(reverse=descending)
    for ix, item in enumerate(data):
        tree.move(item[1], '', ix)
    # switch the heading so it will sort in the opposite direction
    tree.heading(col, command=lambda col=col: sortby(tree, col, \
        int(not descending)))

def set_list_ProfitListByDay(list, ctrl_Programari, container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['Day', 'Normal charging', 'Fast charging','Total profit']  # copia fidela a listei de capete de tabel
    for row in ctrl_Programari.getProfitByDay():
        list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
    list.column(list_header[0], width=100)
    list.column(list_header[1], width=100)
    list.column(list_header[2], width=100)
    list.column(list_header[3], width=80)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()


def set_list_ProfitListByWeek(list, ctrl_Programari, container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['Year', 'Week', 'Normal charging', 'Fast charging', 'Total profit']  # copia fidela a listei de capete de tabel
    for row in ctrl_Programari.getProfitByWeek():
        list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
    list.column(list_header[0], width=50)
    list.column(list_header[1], width=50)
    list.column(list_header[2], width=100)
    list.column(list_header[3], width=100)
    list.column(list_header[4], width=80)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()

def set_list_ProfitListByMonth(list,ctrl_Programari, container):
    list.delete(*list.get_children())  # golim lista initial, sa nu se intample ce zicea Andra
    list_to_add = []  # definim o lista goala unde adaugam obiectele pe care vrem sa le afisam
    list_header = ['Year', 'Month', 'Normal charging', 'Fast charging', 'Total profit']  # copia fidela a listei de capete de tabel
    for row in ctrl_Programari.getProfitByMonth():
        list_to_add.append(row)
    for item in list_to_add:  # pentru fiecare obiect ce vrem sa il aratam
        list.insert('', 'end', values=item)  # adaugam in obiectul de tip tree
    list.column(list_header[0], width=50)
    list.column(list_header[1], width=50)
    list.column(list_header[2], width=100)
    list.column(list_header[3], width=100)
    list.column(list_header[4], width=80)
    tk.Misc.lift(container)  # ridicam container-ul listei sa se vada deasupra
    sys.stdout.flush()


def set_labels_TotalAvailableBookedForSpecificDate(totalLotsLabel,availableLotsLabel,bookedLotsLabel,ctrl_parcari, year,month,day,hour):
    results=ctrl_parcari.getTotalCapacityBookedAvailableForSpecificDate(year,month,day,hour)
    totalLotsLabel.configure(text=results[0])
    availableLotsLabel.configure(text=results[1])
    bookedLotsLabel.configure(text=results[2])


def set_labels_TotalAvailableBookedForToday(totalLotsLabel,availableLotsLabel,bookedLotsLabel,ctrl_parcari, hour):
    results=ctrl_parcari.getTotalCapacityBookedAvailableForToday(hour)
    totalLotsLabel.configure(text=results[0])
    availableLotsLabel.configure(text=results[1])
    bookedLotsLabel.configure(text=results[2])

